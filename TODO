
something to decide
	- use persistent history, eg. save it to file							done
	- how much work is it, to add input of heredoc to history?
	- could we handle readline leak if we fork the process for each input?
	- cd: should we use the non directory path?
	
Parsing
	=> input handling and history
	=> parsing & tokenizing
	=> Handling quotes + braces
	=> Variable expansion

Execution
	=> Builtins X
		cd								test needed		afelger
		pwd								test needed		afelger
		export	need env variables		test needed		afelger
		unset	need env variables		test needed		afelger
		env		need env variables		test needed		afelger
		exit	not implemented yet
		echo	with -n					test needed		afelger
	
	=> Redirecting
	=> Pipes
	=> execve
	=> Heredoc	
				(another readline with "herdoc>" prompt, listening for the delimter and saving to linkedlist or equal)
				(there could be multiple)
				prompt and write to fd done				afelger
				test needed
				double heredoc: only the last heredoc is redirected to the fd. So maybe we should pack this into a single string and overwrite it with the next heredoc

Runtime
	=> Variables
		get in main						not needed due to global environ like in description of POSIX.1
		put to variable					test needed		afelger
		READ Pid and output on $$ 	//$$			- not posible, needs to be handled? NOOOO
	=> abstraction for malloc
		2 Areas => duration of minishell, duration of single line entry or heredoc
	=> Signalhandling (Sigabort does not close shell)
		SIGINT (STRG C)					test needed		afelger
		SIGQUIT (STRG \) not needed, ignored		TODO: avoid funny empty string display...
		EXIT (STRG D)
			enter "exit", then quit => not a signal but closing stdin
		SIGTSTP (STRG Z) ?? check if handling is need				NO HANDLING NEEDED, WORKS OUT OF THE BOX 😁

FUN:
	- implement Rainbowmode

[program] >> [FILENAME]	append to filename
<< [EOF char]	wait for [EOF char] and the pipe as input
< [fileename] 	content of files as stdin
>	put output into file
|	pipe output of on to stdin of other
"
'


Programm call
"cat -e"						">" 			"text.txt"
|
v
"Progname cat" "Args:['-e']"

echo ""$?"" | cat -e
word word operator word word

			operator (pipe)
			/				\
		command				command
		args:{word}			args{word}

			operator (pipe)
			/				\
		command				command
		args:{0}	args{word}

		


Generator for ASCII ART https://patorjk.com/software/taag/#p=display&h=0&v=0&f=Filth&t=MINISHELL
new git commands:
	=>git branch display branches
	=> git branch [name] creates branch name
	=> git checkout [name] switches to branch
	=> git merge [name] merge branch name to current branch

Somthing about Here-Doc and some realy advanced shell
https://stackoverflow.com/questions/72652796/how-does-this-redirection-after-a-here-document-work
