
something to decide
	- use persistent history, eg. save it to file							done
	- how much work is it, to add input of heredoc to history?
	- could we handle readline leak if we fork the process for each input?
	- cd: should we use the non directory path?

Execution
	=> Builtins X
		cd								check for edge cases		afelger
		pwd								âœ… looks good
		export	need env variables		âœ… looks good
		unset	need env variables		âœ… looks good
		env		need env variables		âœ… looks good
		exit							âœ… looks good
		echo	with -n					âœ… looks good
	
	=> Redirecting 		âœ… looks good
	=> Pipes
				ðŸ†‡ not working: double prompt, at least one of the processes does not return
	=> Heredoc	
				(another readline with "herdoc>" prompt, listening for the delimter and saving to linkedlist or equal)
				(there could be multiple)
				prompt and write to fd done				afelger
				test needed
				double heredoc: only the last heredoc is redirected to the fd. So maybe we should pack this into a single string and overwrite it with the next heredoc
				ðŸ†‡ not working: double heredoc: in cat<<a<<b, 2 prompts will be displayed. if you enter a before b, there'll be a segfault
				ðŸ†‡ not working: SIGINT should prevent other processes from running...
				Maybe I need to rework HEREDOC, since it clearly should be running before the target process is started.
				An Idea is, to put a t_doc struct inside of the cmd,
				write to it in ms_heredoc (without fork),
				open the pipe right before execution (or have something associated with the filed descriptors in the struct)
				then write to the pipe right after execve from main process.
				if interrupt occures, just dont execute
				(ChatGPT said, this sounds like a solid plan ðŸ¤£ðŸ¤£)

Runtime
	=> variables
		ðŸ†‡ display return type is missing
	=> abstraction for malloc
		2 Areas => duration of minishell, duration of single line entry or heredoc
		ðŸ†‡ not implemented yet
	=> Signalhandling (Sigabort does not close shell)
		SIGINT (STRG C)		test needed		afelger
				âœ… working in interactive mode
				ðŸ†‡ not working when programm is executed. Double display of prompt
		SIGQUIT (STRG \) not needed, ignored ðŸŸ¨ seems to be working, more testing needed
		EXIT (STRG D)
			ðŸ†‡ exits, but displays exit line on wrong line

FUN:
	- implement Rainbowmode

[program] >> [FILENAME]	append to filename
<< [EOF char]	wait for [EOF char] and the pipe as input
< [fileename] 	content of files as stdin
>	put output into file
|	pipe output of on to stdin of other
"
'


Programm call
"cat -e"						">" 			"text.txt"
|
v
"Progname cat" "Args:['-e']"

echo ""$?"" | cat -e
word word operator word word

			operator (pipe)
			/				\
		command				command
		args:{word}			args{word}

			operator (pipe)
			/				\
		command				command
		args:{0}	args{word}

		


Generator for ASCII ART https://patorjk.com/software/taag/#p=display&h=0&v=0&f=Filth&t=MINISHELL
new git commands:
	=> git branch display branches
	=> git branch [name] creates branch name
	=> git checkout [name] switches to branch
	=> git merge [name] merge branch name to current branch

Somthing about Here-Doc and some realy advanced shell
https://stackoverflow.com/questions/72652796/how-does-this-redirection-after-a-here-document-work
